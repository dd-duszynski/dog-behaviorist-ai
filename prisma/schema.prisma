// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activityLevel         String
  basicFood             String
  birthday              DateTime
  breed                 String
  breedOther            String?
  castrated             YesNo
  chats                 Chat[]
  favoriteActivity      String?
  favoriteSnack         String?
  favoriteToy           String?
  gender                Gender
  healthProblems        YesNo
  healthProblemsDetails String?
  name                  String
  origin                Origin
  originOther           String?
  others                String?
  photo                 Bytes?
  relationToFood        String
  user                  User     @relation(fields: [userId], references: [id])
  userId                String
  weight                String
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId String @unique
  chats   Chat[]
  dogs    Dog[]
  email   String @unique
  role    Role   @default(USER)
}

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dog      Dog       @relation(fields: [dogId], references: [id], onDelete: Cascade)
  dogId    String
  messages Message[]
  summary  String?
  topic    String?
  user     User      @relation(fields: [userId], references: [id])
  userId   String
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId  String
  content String
  isAi    Boolean @default(false)
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum Origin {
  BREEDING
  SHELTER
  OTHER
}

enum YesNo {
  YES
  NO
}
